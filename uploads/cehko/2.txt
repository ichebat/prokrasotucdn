function Initialize()
{

  StrategyName = "MADRID-Signal v1.0";
  AddInput("Input1", Inputs.Candle, 1, true, "");

  AddGlobalVariable("GridIsOpen", Types.Boolean, false); //флаг закрытия сетки
  AddGlobalVariable("GridIsClosing", Types.Boolean, false); //флаг начала закрытия сетки
  AddGlobalVariable("MarginFlag", Types.Boolean, false); //флаг для сообщения о маржинальной торговле
  AddGlobalVariable("LimitFlag", Types.Boolean, false); //флаг для сообщения об открытой заявке ожидающей исполнения
  AddGlobalVariable("RobotProfit", Types.Double, 0); //Прибыль с момента запуска
  AddGlobalVariable("RobotProfitDay", Types.Double, 0); //Прибыль за прошедший день
  AddGlobalVariable("RobotProfitWeek", Types.Double, 0); //Прибыль за прошедшую неделю
  AddGlobalVariable("RobotProfitMonth", Types.Double, 0); //Прибыль за прошедший месяц
  AddGlobalVariable("GridStart", Types.DateTime, DateTime.Now); //Время открытия новой сетки
  AddGlobalVariable("daysDiffFromMonth", Types.Double, 0); //Сколько дней сдиели в просадке в месяце    
  
  //Робот должен дожидаться исполнения выставленной лимитной заявки
  AddGlobalVariable("lastSignalId", Types.Int, 0); //Тут хранится Id последнего выставленного лимитного ордера
  AddGlobalVariable("xPosition", Types.Double, 0.0); //Запоминает размер последней текущей позиции + поданной заявки
  AddGlobalVariable("xNewPos", Types.Double, 0.0); //Запоминает размер последней поданной заявки
  AddGlobalVariable("xNewDirection", Types.Double, 0.0); //Запоминает направление последнего ордера 0 - Buy, 1 - Sell
  AddGlobalVariable("xNewPrice", Types.Double, 0.0); //Запоминает цену последней поданной заявки
  AddGlobalVariable("xCount", Types.Int, 0); //Тут хранится счетчик для уровня сетки
  AddGlobalVariable("xDepo", Types.Double, 0); //Тут хранится депозита на начало, от нее считается риск, стопы и т.д.
  AddGlobalVariable("xSL", Types.Double, 0); //Тут хранится стоп лосс сетки, учитывающий риски
  AddGlobalVariable("xStartLot", Types.Double, 0); //Тут хранится расчетный стартовый лот
  
  AddGlobalVariable("flagMsgDay", Types.Int, 0); //Тут хранится флаг вывода сообщения о профите за день
  AddGlobalVariable("flagMsgWeek", Types.Int, 0); //Тут хранится флаг вывода сообщения о профите за неделю
  AddGlobalVariable("flagMsgMonth", Types.Int, 0); //Тут хранится флаг вывода сообщения о профите за месяц


  AddParameter("Risk", 1, "Риск на сделку (в %) от депо", 0);
  AddParameter("RiskProfit", 0.5, "Соотношение риска к прибыли (1:2)", 0);
  AddParameter("MoveSL", 0, "0 - не двигать стопы, 1 - двигать стопы", 0);
  AddParameter("StartLot", 1, "Стартовый размер сетки (в штуках)", 0);
  AddParameter("PSM", 1.5, "Коэффициент усреднения лота для нового уровня сетки", 0);
  AddParameter("RBO_Percent", 0.5, "Уровень изменения цены (в %) для докупки (усреднения)", 0);
  AddParameter("TP_Percent", 0.5, "Тейк профит (в %) от цены для закрытия всей сетки", 0);  
      
  AddParameter("UseLog", 0, "0 - не пишет в лог, 1 - пишет в лог", 0);
  AddParameter("Interval", 0, "Запуск через каждые Interval свечей (см. выбранный ТФ)", 0); 
  AddParameter("Offset", 0, "На какой свече внутри Interval запуск (от 1 до Interval)", 0); 
  
  AddParameter("OrderDirection", 0, "Направление сетки (0:Buy;1:Sell;2:Buy/Sell)", 0); //Тут хранится режим открытия сеток: 0 - только Лонг, 1 - только Шорт, 2 - Направление (шорт или лонг) выбирается и дальше поддерживается 
        
  AddParameter("BB_Period", 20, "Период для линий Боллинджера", 0); //Период для Боллинджера                
  AddParameter("BB_N", 2.0, "Число стандартных отклонений для линий Боллинджера", 0); //Число стандартных отклонений для Боллинджера 
}

function OnUpdate()
{

/*
Func<T,TResult> универсальный делегат
Экземпляр этого делегата можно создать как

 Func<int,bool> myFunc
 
где int — входной параметр, а bool — возвращаемое значение.
Возвращаемое значение всегда указывается в последнем параметре типа.
Func<int, string, bool> определяет делегат с двумя входными параметрами, int и string, и типом возвращаемого значения bool.
*/

 //функция для определения подходящего паттерна для входа
 Func<double> GetPatternSignal = () =>
  {
    if (OrderDirection == 0) return 1; //Вход в лонг
    if (OrderDirection == 1) return -1; //Вход в шорт
    //if (OrderDirection == 2 || OrderDirection == 3) {xNewDirection = rnd.Next(0, 2) * 2 - 1;}
    //if (OrderDirection == 2 && OrderDirections.Count>0) {xNewDirection = OrderDirections[OrderDirections.Count-1];}
   return 0; //Ждем дальше     
  };
  

//Тикер инструмента
string ticker = Input1.VirtualSecurity;
ticker = ticker.Split('=')[0];

if (Interval <=0) Interval = 1;
if (Offset <=0) Offset = 1;


//Статистика работы выводится в начале месяца
if (BarDate().Month != BarDate(-1-Interval+1).Month && flagMsgMonth == 0 && (BarTime() < AsTime(10, 20, 0)) && (BarTime() > AsTime(9, 55, 0))){
	if (UseLog>0) LogData ("#_"+ticker+"_: "+"\U0001F4B8 За месяц заработано: "+RobotProfitMonth.ToString("F2")+" руб.*"+((daysDiffFromMonth > 5)?(", находились в просадке max \U000026A1 *"+Convert.ToInt32(daysDiffFromMonth).ToString()+" дней* \U000026A1"):("")),Name);
	RobotProfitMonth = 0;
	daysDiffFromMonth = 0;
	flagMsgMonth = 1;
	flagMsgWeek = 1;
	flagMsgDay = 1;
}
else
//Статистика работы выводится в начале недели
if (BarDate().DayOfWeek < BarDate(-1-Interval+1).DayOfWeek && flagMsgWeek == 0 && (BarTime() < AsTime(10, 20, 0)) && (BarTime() > AsTime(9, 55, 0))){
	if (UseLog>0) LogData ("#_"+ticker+"_: "+"\U0001F4B8 За неделю заработано: "+RobotProfitWeek.ToString("F2")+" руб.*",Name);
	RobotProfitWeek = 0;
	flagMsgMonth = 1;
	flagMsgWeek = 1;
	flagMsgDay = 1;
}
else
//Статистика работы выводится в начале дня
if (BarDate() > BarDate(-1-Interval+1) && flagMsgDay == 0 && (BarTime() < AsTime(10, 20, 0)) && (BarTime() > AsTime(9, 55, 0))){
	if (UseLog>0) LogData ("#_"+ticker+"_: "+"\U0001F4B8 За день заработано: "+RobotProfitDay.ToString("F2")+" руб.*",Name);
	RobotProfitDay = 0;
	flagMsgMonth = 1;
	flagMsgWeek = 1;
	flagMsgDay = 1;
}

if ((BarTime() >= AsTime(10, 20, 0)) || (BarTime() <= AsTime(9, 55, 0)))
{
	flagMsgDay = 0;
	flagMsgWeek = 0;
	flaÿ
